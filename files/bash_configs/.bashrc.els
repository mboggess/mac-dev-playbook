# Copyright (c) 2014, 2016, University of Washington
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This file belongs in the home directory as a hidden file,
# named "bashrc.$project_name".

# EDIT PER PROJECT #
# Does the user have a Git subdirectory?
if [[ -d $HOME/elsevier/git ]]; then
  export GIT="$HOME/elsevier/git"
fi

if [[ -d $HOME/elsevier/gitlab ]]; then
  export GITLAB="$HOME/elsevier/gitlab"
fi

# This section is for things that MUST be done for every
# shell (regardless of whether it is an interactive shell
# or not (as determined by PS1 being set or not).

# EDIT PER PROJECT #
. $ELS/bin/elsevier_functions.sh

# This section should ONLY include files that
# apply to interactive shells.

# EDIT PER PROJECT #
if [ ! -z "$PS1" ]; then
  # Get ELS additions to bashrc
  if [ -d $HOME/elsevier/etc/bashrc.els.d ]; then
    for i in $HOME/elsevier/etc/bashrc.els.d/*; do
      if [ -r $i ]; then
        echo "[+] Sourcing $i ..."
        . $i
      fi
    done
    unset i
  fi
fi

# The following is a modified version of the code found in:
# http://stackoverflow.com/questions/23399183/bash-command-prompt-with-virtualenv-and-git-branch

# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

 # Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

function set_git_branch {
  BRANCH=`parse_git_branch`
  local TIME=`fmt_time` # format time for prompt string
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

function parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != *"nothing to commit, working tree clean"* ]] && echo "*"
}

fmt_time () { #format time just the way I likes it
  datevar=`date +%p`
  if [ -n $datevar ] && [ "$datevar" = "PM" ]; then
    meridiem="pm"
  else
    meridiem="am"
  fi
    date +"%l:%M:%S$meridiem"|sed 's/ //g'
}

function set_prompt_symbol () {
  if test $1 -eq 0 ; then
    PROMPT_SYMBOL="\$"
  else
    PROMPT_SYMBOL="${LIGHT_RED}\$${COLOR_NONE}"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
    PYTHON_VIRTUALENV=""
  else
     PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
  fi
}

# Logic for trimmed PWD from
# http://zork.net/~st/jottings/How_to_limit_the_length_of_your_bash_prompt.html
function set_trimmed_pwd () {
  _PWD=$(pwd | sed "s|$HOME|\~|")
  TRIMMED_PWD=${_PWD: -30};
  TRIMMED_PWD=${TRIMMED_PWD:-$_PWD};
}

# Set the full bash prompt.
function set_bash_prompt () {
  set_prompt_symbol $?
  set_trimmed_pwd
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi
  # Set the bash prompt variable.
  PS1="${YELLOW}\u@\h:${TRIMMED_PWD}${COLOR_NONE} (${BRANCH}) ${PROMPT_SYMBOL} "
}

if [ -n "$PS1" ]; then
    # A temporary variable to contain our prompt command
    NEW_PROMPT_COMMAND='
      _PWD="\w"
      TRIMMED_PWD=${_PWD: -30};
      TRIMMED_PWD=${TRIMMED_PWD:-$_PWD};
    '

    # If there's an existing prompt command, let's not
    # clobber it.
    if [ -n "$PROMPT_COMMAND" ]; then
        PROMPT_COMMAND="$PROMPT_COMMAND;$(set_bash_prompt)"
    else
        PROMPT_COMMAND=set_bash_prompt
    fi
fi

# DO NOT USE "exit" HERE.
# (This file is sourced).
